// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id          String        @id @default(uuid())
  name        String
  userId      String
  billboards  Billboard[]   @relation("storeToBillboard")
  categories  Category[]    @relation("storeToCategory")
  sizes       Size[]        @relation("storeToSize")
  color       Color[]       @relation("storeToColor")
  products    Product[]     @relation("storeToProduct")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Billboard {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("storeToBillboard", fields: [storeId], references: [id])
  label       String
  imageUrl    String
  categories  Category[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}

model Category {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("storeToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard   @relation(fields: [billboardId], references: [id])
  name        String
  product     Product[]   @relation("categoryToProduct")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("storeToSize", fields: [storeId], references: [id])
  name        String
  value       String
  products    Product[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}

model Color {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("storeToColor", fields: [storeId], references: [id])
  name        String
  value       String
  products    Product[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}

model Product {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("storeToProduct", fields: [storeId], references: [id])
  categoryId  String
  category    Category    @relation("categoryToProduct", fields: [categoryId], references: [id])
  name        String
  price       Decimal
  quantity    Int         @default(0)
  description String
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  sizeId      String
  size        Size        @relation(fields: [sizeId], references: [id])
  colorId     String
  color       Color       @relation(fields: [colorId], references: [id])
  images      ProductImage[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model ProductImage {
  id          String      @id @default(uuid())
  productId   String
  url         String
  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([productId])
}
